# -*- coding: utf-8 -*-
"""Agnes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cR3GbwKe7yX1Vyqja-58gIurUSv7orXu
"""

from scipy.cluster.hierarchy import linkage, dendrogram, fcluster
from sklearn.cluster import AgglomerativeClustering
import matplotlib.pyplot as plt
import numpy as np

# Sample data with 4 columns
dataset = read_csv("/content/Iris.csv")
X_data = dataset.iloc[:,1:-1]
data = X_data.to_numpy()

# Perform hierarchical clustering
Z = linkage(data, method='ward')  # Ward linkage method
num_clusters = 2  # Specify the desired number of clusters

# Generate flat clusters
cluster_labels = fcluster(Z, t=num_clusters, criterion='maxclust')

# Plot dendrogram with colored clusters
plt.figure(figsize=(10, 6))
dendrogram(Z, labels=cluster_labels, leaf_rotation=90., leaf_font_size=10., color_threshold=10)
plt.title("Dendrogram with Cluster Assignments")
plt.xlabel("Data Points")
plt.ylabel("Distance")
plt.show()

# Print cluster labels
print("Cluster Labels for Each Data Point:", cluster_labels)

import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import linkage, dendrogram

# Load the Iris dataset
iris = datasets.load_iris()
X = iris.data  # Features (Sepal Length, Sepal Width, Petal Length, Petal Width)
y = iris.target  # True labels (not used in unsupervised learning)

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Define a function to apply AGNES with different linkage methods
def agnes_clustering(linkage_method):
    agnes = AgglomerativeClustering(n_clusters=3, linkage=linkage_method)
    cluster_labels = agnes.fit_predict(X_scaled)

    # Compute linkage matrix for dendrogram
    Z = linkage(X_scaled, method=linkage_method)

    # Reduce dimensionality for visualization using PCA
    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X_scaled)

    # Plot the clusters
    plt.figure(figsize=(8, 6))
    for cluster in range(3):
        plt.scatter(
            X_pca[np.where(cluster_labels == cluster), 0],  # Fixed indexing issue
            X_pca[np.where(cluster_labels == cluster), 1],
            label=f"Cluster {cluster + 1}"
        )

    plt.title(f"AGNES Clustering ({linkage_method.capitalize()} Linkage)")
    plt.xlabel("Principal Component 1")
    plt.ylabel("Principal Component 2")
    plt.legend()
    plt.show()

    # Plot the dendrogram
    plt.figure(figsize=(10, 6))
    dendrogram(Z)
    plt.title(f"Dendrogram ({linkage_method.capitalize()} Linkage)")
    plt.xlabel("Data Points")
    plt.ylabel("Distance")
    plt.show()

# Apply AGNES with single linkage
agnes_clustering("single")

# Apply AGNES with complete linkage
agnes_clustering("complete")

# Apply AGNES with average linkage
agnes_clustering("average")