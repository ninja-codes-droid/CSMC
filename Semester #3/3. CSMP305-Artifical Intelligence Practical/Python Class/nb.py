# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MHlwyb2DoZAe7WNDvCXI5oDiCrurVyl_
"""

import pandas as pd
 from sklearn.model_selection import train_test_split
 from sklearn.naive_bayes import GaussianNB
 from sklearn.preprocessing import LabelEncoder
 # Sample "Buy Computer" dataset
 data = {
    'Age': ['<=30', '<=30', '31-40', '>40', '>40', '>40', '31-40', '<=30', '<=30', '>40', '<=30',
'31-40', '31-40', '>40'],
    'Income': ['High', 'High', 'High', 'Medium', 'Low', 'Low', 'Low', 'Medium', 'Low', 'Medium',
'Medium', 'Medium', 'High', 'Medium'],
    'Student': ['No', 'No', 'No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes',
'No'],
    'Credit_Rating': ['Fair', 'Excellent', 'Fair', 'Fair', 'Fair', 'Excellent', 'Excellent', 'Fair',
'Fair', 'Fair', 'Excellent', 'Excellent', 'Fair', 'Excellent'],
    'Buy_Computer': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes',
'Yes', 'No']
 }
 df = pd.DataFrame(data)
 # Encode categorical variables
 le = LabelEncoder()
 encoded_data = df.apply(le.fit_transform)
 # Features and target
 X = encoded_data[['Age', 'Income', 'Student', 'Credit_Rating']]
 y = encoded_data['Buy_Computer']
 # Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
 # Train a Na√Øve Bayes classifier
 nb = GaussianNB()
 nb.fit(X_train, y_train)
 # Predict class labels for test samples
 y_pred = nb.predict(X_test)
 # Example: Predict for unknown samples
 unknown_samples = pd.DataFrame({
    'Age': ['<=30', '>40'],
    'Income': ['Medium', 'Low'],
    'Student': ['Yes', 'No'],
    'Credit_Rating': ['Fair', 'Excellent']
 })
 # Encode the unknown samples
 encoded_unknown_samples = unknown_samples.apply(lambda col: le.fit_transform(col))
 # Predict class labels for unknown samples
 predicted_labels = nb.predict(encoded_unknown_samples)
 print("Predicted class labels for unknown samples:", predicted_labels)